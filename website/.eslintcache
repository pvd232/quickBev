[{"/Users/machina/Developer/quickbev/quickbev-website/src/index.js":"1","/Users/machina/Developer/quickbev/quickbev-website/src/reportWebVitals.js":"2","/Users/machina/Developer/quickbev/quickbev-website/src/App.js":"3","/Users/machina/Developer/quickbev/quickbev-website/src/Navbar.js":"4","/Users/machina/Developer/quickbev/quickbev-website/src/Main.js":"5","/Users/machina/Developer/quickbev/quickbev-website/src/pages/Signup.js":"6","/Users/machina/Developer/quickbev/quickbev-website/src/pages/Home.js":"7","/Users/machina/Developer/quickbev/quickbev-website/src/Models.js":"8","/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Dashboard.js":"9","/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Chart.js":"10","/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Orders.js":"11","/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Deposits.js":"12","/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Title.js":"13","/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/ListItems.js":"14","/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/listItems.js":"15","/Users/machina/Developer/quickbev/quickbev-website/src/SearchLocationInput.js":"16"},{"size":639,"mtime":1611113797780,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1610406040066,"results":"19","hashOfConfig":"18"},{"size":163,"mtime":1610830037694,"results":"20","hashOfConfig":"18"},{"size":2662,"mtime":1610823614508,"results":"21","hashOfConfig":"18"},{"size":446,"mtime":1610823491200,"results":"22","hashOfConfig":"18"},{"size":26557,"mtime":1611121467535,"results":"23","hashOfConfig":"18"},{"size":129,"mtime":1610821729456,"results":"24","hashOfConfig":"18"},{"size":4333,"mtime":1611109038953,"results":"25","hashOfConfig":"18"},{"size":6136,"mtime":1610827017193,"results":"26","hashOfConfig":"18"},{"size":1500,"mtime":1610821200123,"results":"27","hashOfConfig":"18"},{"size":847,"mtime":1610821306438,"results":"28","hashOfConfig":"18"},{"size":847,"mtime":1610821275345,"results":"29","hashOfConfig":"18"},{"size":343,"mtime":1610821320487,"results":"30","hashOfConfig":"18"},{"size":1971,"mtime":1610822941432,"results":"31","hashOfConfig":"18"},{"size":1971,"mtime":1610822941432,"results":"32","hashOfConfig":"18"},{"size":1850,"mtime":1610866145012,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1j4yi24",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/machina/Developer/quickbev/quickbev-website/src/index.js",[],["69","70"],"/Users/machina/Developer/quickbev/quickbev-website/src/reportWebVitals.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/App.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/Navbar.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/Main.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/pages/Signup.js",["71","72","73","74"],"import React, { useState, useReducer, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Merchant, Business, makeApiRequest } from \"../Models.js\";\nimport Navbar from \"../Navbar.js\";\nimport logo from \"../qbLogo.png\";\nimport SearchLocationInput from \"../SearchLocationInput.js\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nconst ProgressBar = (props) => {\n  const statusValues = [\n    \"Account setup\",\n    \"Promote your menu\",\n    \"Start getting paid\",\n  ];\n  return (\n    <ul id=\"progressbar\">\n      {statusValues.map((item, i) => {\n        return (\n          <li className={i <= props.i ? \"active\" : \"\"} key={i}>\n            {item}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nconst CreateYourAccountFieldset = (props) => {\n  // use reducer takes 2 parameters, the first is a function called a reducer, the second is the initial value of the state\n  // usually the reducer funciton takes in two parameters, the state, and the action being performed. but the way ive defined it, it takes in an object that stores the new value the user has type in\n  // the syntax of the reducer funciton is such that parenthesis are used for the return value instead of brackets because the only logic in the return value is the value that it returns. the return word is also omitted\n  // i supply an anonymous reducer function that takes in the current and new state and returns the updated state object spreading syntax\n  // this reduction function is applied in the formChangeHandler which dynamically sets the state value based on the name passed in through the event\n  // i am telling React how to update the state with the reducer function, and then i am binding those instructions to my setFormValue function which then implements that logic.\n  // react is passing the current state into the function, and i am passing in the second parameter, new state, i could implement some logic if i wanted, then i return what i want the new state to be to react and react updates it\n  const [formValue, setFormValue] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    {\n      firstName: \"\",\n      lastName: \"\",\n      phoneNumber: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    }\n  );\n  const [errorMsg, setErrorMsg] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    {\n      confirmPwdDisplay: \"none\",\n    }\n  );\n  const formChangeHandler = (event) => {\n    let name = event.target.name;\n    let value = event.target.value;\n    setFormValue({ [name]: value });\n  };\n  const validate = (form) => {\n    form.classList.add(\"was-validated\");\n    return form.checkValidity();\n  };\n  const handleNext = (event) => {\n    event.preventDefault();\n    const form = event.target;\n\n    if (validate(form)) {\n      var newErrorMsgState = {\n        confirmPwdDisplay: \"none\",\n      };\n      if (formValue.password !== formValue.confirmPassword) {\n        console.log(\"passwords dont match\");\n\n        newErrorMsgState[\"confirmPasswordErrorMsg\"] =\n          \"* Your passwords do not match\";\n        newErrorMsgState[\"confirmPwdDisplay\"] = \"inline-block\";\n        setErrorMsg(newErrorMsgState);\n        return false;\n      } else {\n        const newMerchant = new Merchant();\n        newMerchant.firstName = formValue.firstName;\n        newMerchant.lastName = formValue.lastName;\n        newMerchant.phoneNumber = formValue.phoneNumber;\n        newMerchant.id = formValue.email;\n        newMerchant.password = formValue.password;\n        props.onClick(\"next\", \"merchant\", newMerchant);\n      }\n    } else {\n      return false;\n    }\n  };\n  const confirmPwdErrorMsgStyle = {\n    display: errorMsg.confirmPwdDisplay,\n    textAlign: \"left\",\n    marginTop: \"0\",\n  };\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        handleNext(e);\n      }}\n    >\n      <fieldset>\n        <h2 className=\"fs-title\">Your menu and ordering</h2>\n        <Row>\n          <Col>\n            <Form.Label\n              style={{\n                display: \"flex\",\n                fontSize: \"14px\",\n                fontWeight: \"bolder\",\n              }}\n            >\n              First name\n            </Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"firstName\"\n              required\n              onChange={(e) => {\n                formChangeHandler(e);\n              }}\n              value={formValue.firstName}\n            />\n          </Col>\n          <Col>\n            <Form.Label\n              style={{\n                display: \"flex\",\n                fontSize: \"14px\",\n                fontWeight: \"bolder\",\n              }}\n            >\n              Last name\n            </Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"lastName\"\n              required\n              onChange={(e) => {\n                formChangeHandler(e);\n              }}\n              value={formValue.lastName}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Label\n              style={{\n                display: \"flex\",\n                fontSize: \"14px\",\n                fontWeight: \"bolder\",\n              }}\n            >\n              Email\n            </Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              required\n              onChange={(e) => {\n                formChangeHandler(e);\n              }}\n              value={formValue.email}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Label\n              style={{\n                display: \"flex\",\n                fontSize: \"14px\",\n                fontWeight: \"bolder\",\n              }}\n            >\n              Phone number\n            </Form.Label>\n            <Form.Control\n              type=\"tel\"\n              name=\"phoneNumber\"\n              required\n              pattern=\"[0-9]{10}\"\n              onChange={(e) => {\n                formChangeHandler(e);\n              }}\n              value={formValue.phoneNumber}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Form.Label\n              style={{\n                display: \"flex\",\n                fontSize: \"14px\",\n                fontWeight: \"bolder\",\n              }}\n            >\n              Password\n            </Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              required\n              onChange={(e) => {\n                formChangeHandler(e);\n              }}\n              value={formValue.password}\n            />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <div className=\"invalid-feedback\" style={confirmPwdErrorMsgStyle}>\n              {errorMsg.confirmPasswordErrorMsg}\n            </div>\n            <Form.Label\n              style={{\n                display: \"flex\",\n                fontSize: \"14px\",\n                fontWeight: \"bolder\",\n              }}\n            >\n              Confirm password\n            </Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"confirmPassword\"\n              required\n              onChange={(e) => {\n                formChangeHandler(e);\n              }}\n              value={formValue.confirmPassword}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button type=\"submit\" name=\"next\" className=\"next action-button\">\n              Next\n            </Button>\n          </Col>\n        </Row>\n      </fieldset>\n    </Form>\n  );\n};\nconst PromoteYourMenuFieldset = (props) => {\n  const [formValue, setFormValue] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    {\n      menuUrl: \"\",\n      typeOfBusiness: \"\",\n      numberOfLocations: \"\",\n    }\n  );\n  const [errorMsg, setErrorMsg] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    {\n      menuSubmittedErrorMsgDisplay: \"none\",\n    }\n  );\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [selectedFileName, setSelectedFileName] = useState(\"\");\n\n  const [tablet, setTablet] = useState(false);\n  const [isSwitchOn, setIsSwitchOn] = useState(false);\n  const [switchLabel, setSwitchLabel] = useState(\n    \"Toggle if you have 2+ different businesses to register (not a chain with multiple of the same business, but several completely seperate businesses)\"\n  );\n\n  const onSwitchAction = () => {\n    setIsSwitchOn(!isSwitchOn);\n    if (\n      switchLabel ===\n      \"Toggle if you have 2+ different businesses to register (not a chain with multiple of the same business, but several completely seperate businesses)\"\n    ) {\n      setSwitchLabel(\n        \"After your initial registration you can easily add more businesses to your account!\"\n      );\n    } else {\n      setSwitchLabel(\n        \"Toggle if you have 2+ different businesses to register (not a chain with multiple of the same business, but several completely seperate businesses)\"\n      );\n    }\n  };\n  const onFileChange = (event) => {\n    console.log(\"event\", event);\n    // Update the state\n    console.log(\"event.target.files[0]\", event.target.files[0].name);\n    console.log(\"event.target.files\", event.target.files);\n    setSelectedFile(event.target.files[0]);\n    setSelectedFileName(event.target.files[0].name);\n  };\n\n  // On file upload (click the upload button)\n  const onFileUpload = (event) => {\n    // Create an object of formData\n    event.preventDefault();\n    const formData = new FormData();\n    // Update the formData object\n    formData.append(\"file\", selectedFile, selectedFile.name);\n    for (var key of formData.entries()) {\n      console.log(key[0] + \", \" + key[1]);\n    }\n\n    // Details of the uploaded file\n    // return false;\n    // Request made to the backend api\n    // Send formData object\n    fetch(\"http://127.0.0.1:5000/signup\", {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(\"Success:\", result);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  };\n\n  const formChangeHandler = (event) => {\n    let name = event.target.name;\n    console.log(\"formValue.typeOfBusiness\", formValue.typeOfBusiness);\n    console.log(\"name\", name);\n    let value = event.target.value;\n    console.log(\"value\", value);\n    setFormValue({ [name]: value });\n  };\n  const validate = (form) => {\n    if (form.checkValidity()) {\n      form.classList.add(\"was-validated\");\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const handleNext = (event) => {\n    event.preventDefault();\n    const form = event.target;\n\n    if (validate(form)) {\n      if (!(formValue.menuUrl || formValue.selectedFile)) {\n        const newErrorMsgState = {};\n        newErrorMsgState[\"menuSubmittedErrorMsg\"] =\n          \"* Please upload your menu and or submit a link to it\";\n        newErrorMsgState[\"menuSubmittedErrorMsgDisplay\"] = \"inline-block\";\n        setErrorMsg(newErrorMsgState);\n        return false;\n      }\n      const formData = new FormData();\n      // Update the formData object\n      formData.append(\"numberOfLocations\", formData.numberOfLocations);\n      formData.append(\"typeOfBusiness\", formData.typeOfBusiness);\n      formData.append(\"tablet\", formData.tablet);\n\n      if (formValue.menuUrl) {\n        formData.append(\"menuUrl\", formValue.menuUrl);\n      }\n      if (formValue.selectedFile) {\n        formData.append(\"menuFile\", selectedFile, selectedFile.name);\n      }\n\n      props.onClick(\"next\", formData);\n    } else {\n      return false;\n    }\n  };\n  const menuSubmittedErrorMsgStyle = {\n    display: errorMsg.menuSubmittedErrorMsgDisplay,\n    textAlign: \"left\",\n    marginTop: \"0\",\n  };\n  return (\n    <Form\n      onSubmit={(e) => {\n        handleNext(e);\n      }}\n    >\n      <fieldset>\n        <p\n          className=\"text-muted\"\n          style={{ fontSize: \"11px\", margin: \"0\", textAlign: \"left\" }}\n        >\n          Step 2/3\n        </p>\n        <h2 className=\"fs-title\">Promote your menu</h2>\n        <h5 className=\"fs-subtitle\">\n          Show off your business by uploading a link, image, or PDF of your\n          menu!\n        </h5>\n        <Row>\n          <Form.Group\n            as={Col}\n            style={{ paddingLeft: \"5px\", marginBottom: \"0\" }}\n          >\n            <div\n              className=\"invalid-feedback\"\n              style={menuSubmittedErrorMsgStyle}\n            >\n              {errorMsg.menuSubmittedErrorMsg}\n            </div>\n            <Form.Label>Website link</Form.Label>\n            <Form.Control\n              type=\"url\"\n              name=\"menuUrl\"\n              placeholder=\"https://yourwebsite.com\"\n              onChange={(e) => {\n                formChangeHandler(e);\n              }}\n              value={formValue.menuUrl}\n              noValidate\n              // required={formValue.selectedFile ? false : true}\n            />\n          </Form.Group>\n        </Row>\n\n        <Row>\n          <Col\n            sm={2}\n            className=\"fs-subtitle\"\n            style={{\n              alignSelf: \"center\",\n              marginTop: \"0px\",\n              marginBottom: \"0px\",\n            }}\n          >\n            or\n          </Col>\n        </Row>\n        <Row>\n          <Form.Group as={Col} style={{ paddingLeft: \"5px\" }} id=\"fileInputCol\">\n            <Form.Label>PDF or Image</Form.Label>\n            <Form.File\n              id=\"fileInput\"\n              name=\"menuImg\"\n              type=\"file\"\n              custom\n              style={{\n                border: \"none\",\n                borderRadius: \"3px\",\n                fontFamily: \"montserrat\",\n                fontSize: \"12px\",\n                height: \"4vh\",\n                padding: \"0\",\n              }}\n              onChange={(event) => onFileChange(event)}\n              label={selectedFileName}\n              noValidate\n\n              // value={selectedFile}\n            />\n          </Form.Group>\n        </Row>\n        <Row>\n          <Form.Group\n            as={Col}\n            controlId=\"typeOfBusiness\"\n            style={{ paddingLeft: \"5px\" }}\n          >\n            <Form.Label>Type of business</Form.Label>\n            <Form.Control\n              as=\"select\"\n              required\n              custom\n              name=\"typeOfBusiness\"\n              onChange={(event) => formChangeHandler(event)}\n              style={{\n                paddingLeft: \"15px\",\n                paddingRight: \"0\",\n                paddingTop: \"0\",\n                paddingBottom: \"0\",\n              }}\n            >\n              <option>Choose ...</option>\n              <option>Bar</option>\n              <option>Restaurant</option>\n              <option>Club</option>\n              <option>Music Festival</option>\n              <option>Sporting Event</option>\n            </Form.Control>\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"numberOfLocations\">\n            <Form.Label>Number of locations</Form.Label>\n            <Form.Control\n              as=\"select\"\n              required\n              custom\n              name=\"numberOfLocations\"\n              onChange={(event) => formChangeHandler(event)}\n              style={{\n                paddingLeft: \"15px\",\n                paddingRight: \"0\",\n                paddingTop: \"0\",\n                paddingBottom: \"0\",\n              }}\n            >\n              <option value=\"\">Choose...</option>\n              <option>1-5</option>\n              <option>Restaurant</option>\n              <option>10-20</option>\n              <option>20-100</option>\n              <option>100+</option>\n            </Form.Control>\n          </Form.Group>\n        </Row>\n        <Row>\n          <Col sm={12} id={isSwitchOn ? \"custom-switch-col\" : \"\"}>\n            <Form.Check\n              type=\"switch\"\n              id=\"custom-switch\"\n              label={switchLabel}\n              onChange={onSwitchAction}\n              checked={isSwitchOn}\n              noValidate\n            />\n          </Col>\n        </Row>\n\n        <h2 className=\"fs-title\" style={{ marginTop: \"40px\" }}>\n          How do you want to recieve your orders?\n        </h2>\n\n        <Row style={{ paddingLeft: \"5px\", paddingRight: \"15px\" }}>\n          <h5\n            className=\"fs-subtitle\"\n            style={{\n              paddingLeft: \"15px\",\n              paddingRight: \"5px\",\n            }}\n          >\n            Choose how to recieve your orders. We highly reccomend the tablet\n            solution to maximize your business' efficieny in fulfilling orders.\n          </h5>\n          <Card>\n            <Card.Body>\n              <Row>\n                <Col xs={1}>\n                  <Form.Check\n                    type=\"radio\"\n                    label=\"\"\n                    name=\"tablet\"\n                    id=\"formHorizontalRadios2\"\n                    onChange={(e) => {\n                      setTablet(true);\n                    }}\n                  />\n                </Col>\n                <Col xs={11}>\n                  <Form.Label>Tablet (Highly Reccomended)</Form.Label>\n                  <Card.Text\n                    className=\"text-muted\"\n                    style={{\n                      textIndent: \"0\",\n                      textAlign: \"left\",\n                      fontSize: \"13px\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    $0 for 30 days, then $5/month without cell service, or\n                    $15/month with cell service\n                  </Card.Text>\n\n                  <Card.Text\n                    className=\"text-muted\"\n                    style={{\n                      textIndent: \"0\",\n                      textAlign: \"left\",\n                      fontSize: \"12px\",\n                      fontWeight: \"bolder\",\n                    }}\n                  >\n                    Your orders will be sent to your tablet for convenience and\n                    efficiency.\n                  </Card.Text>\n                </Col>\n              </Row>\n            </Card.Body>\n          </Card>\n        </Row>\n        <Row style={{ paddingLeft: \"5px\", paddingRight: \"15px\" }}>\n          <Card>\n            <Card.Body>\n              <Row>\n                <Col xs={1}>\n                  <Form.Check\n                    type=\"radio\"\n                    label=\"\"\n                    name=\"tablet\"\n                    id=\"formHorizontalRadios2\"\n                    onChange={(e) => {\n                      setTablet(false);\n                    }}\n                  />\n                </Col>\n                <Col xs={11}>\n                  <Form.Label>Email + Phone Confirmation</Form.Label>\n                  <Card.Text\n                    className=\"text-muted\"\n                    style={{\n                      textIndent: \"0\",\n                      textAlign: \"left\",\n                      fontSize: \"13px\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    $0\n                  </Card.Text>\n\n                  <Card.Text\n                    className=\"text-muted\"\n                    style={{\n                      textIndent: \"0\",\n                      textAlign: \"left\",\n                      fontSize: \"12px\",\n                      fontWeight: \"bolder\",\n                    }}\n                  >\n                    Your orders will be sent to your tablet for convenience and\n                    efficiency.\n                  </Card.Text>\n                </Col>\n              </Row>\n            </Card.Body>\n          </Card>\n        </Row>\n        <Button\n          name=\"previous\"\n          className=\"previous action-button\"\n          required\n          onClick={() => {\n            props.onClick(\"previous\");\n          }}\n        >\n          Previous\n        </Button>\n        <Button type=\"submit\" name=\"next\" className=\"next action-button\">\n          Next\n        </Button>\n      </fieldset>\n    </Form>\n  );\n};\nconst BusinessFieldset = (props) => {\n  const [formValue, setFormValue] = useReducer(\n    (state, newState) => ({ ...state, ...newState }),\n    {\n      name: \"\",\n      phoneNumber: \"\",\n      address: \"\",\n      street: \"\",\n      suite: \"\",\n      city: \"\",\n      state: \"\",\n      zipcode: \"\",\n    }\n  );\n  const setAddress = (address) => {\n    if (address.split(\",\").length === 4) {\n      const addressObject = {};\n      addressObject[\"address\"] = address;\n      const addressArray = address.split(\",\");\n      addressObject[\"street\"] = addressArray[0];\n      addressObject[\"city\"] = addressArray[1];\n      const stateZipcodeArray = addressArray[2].split(\" \");\n      addressObject[\"state\"] = stateZipcodeArray[1];\n      addressObject[\"zipcode\"] = stateZipcodeArray[2];\n      console.log(\"addressObject\", addressObject);\n      setFormValue(addressObject);\n    }\n  };\n  const formChangeHandler = (event) => {\n    console.log(\"formValue\", formValue);\n\n    let name = event.target.name;\n    console.log(\"name\", name);\n    let value = event.target.value;\n    console.log(\"value\", value);\n    setFormValue({ [name]: value });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const form = event.target;\n\n    if (validate(form)) {\n      // set all the values for the business\n      // if the user comes back to this page before submitting to change stuff it will reset the values\n      const newBusiness = new Business();\n      newBusiness.id = formValue.name;\n      newBusiness.phoneNumber = formValue.phoneNumber;\n      newBusiness.address = formValue.address;\n      newBusiness.street = formValue.street;\n      newBusiness.suite = formValue.suite;\n      newBusiness.city = formValue.city;\n      newBusiness.state = formValue.state;\n      newBusiness.zipcode = formValue.zipcode;\n      props.onSubmit(newBusiness);\n    } else {\n      return false;\n    }\n  };\n  const validate = (form) => {\n    form.classList.add(\"was-validated\");\n    return form.checkValidity();\n  };\n  return (\n    <Form\n      onSubmit={(e) => {\n        handleSubmit(e);\n      }}\n      autoComplete=\"off\"\n    >\n      <fieldset>\n        <h2 className=\"fs-title\">Your Business</h2>\n        <label htmlFor=\"name\" style={{ display: \"flex\" }}>\n          Name\n        </label>\n        <Form.Control\n          type=\"text\"\n          className=\"mb-3\"\n          name=\"name\"\n          placeholder=\"Business Name\"\n          value={formValue.name}\n          required\n          onChange={(e) => {\n            formChangeHandler(e);\n          }}\n        />\n        <label htmlFor=\"phoneNumber\" style={{ display: \"flex\" }}>\n          Phone Number\n        </label>\n        <Form.Control\n          type=\"tel\"\n          name=\"phoneNumber\"\n          className=\"mb-3\"\n          required\n          pattern=\"[0-9]{10}\"\n          placeholder=\"5128999160\"\n          value={formValue.phoneNumber}\n          onChange={(e) => {\n            formChangeHandler(e);\n          }}\n        />\n        <label htmlFor=\"address\" style={{ display: \"flex\" }}>\n          Address\n        </label>\n        <SearchLocationInput onUpdate={(address) => setAddress(address)} />\n        <Row style={{ justifyContent: \"space-around\" }}>\n          <Form.Control\n            type=\"button\"\n            name=\"previous\"\n            className=\"previous action-button\"\n            value=\"Previous\"\n            onClick={() => {\n              props.onClick(\"previous\");\n            }}\n          />\n          <Form.Control\n            type=\"submit\"\n            name=\"submit\"\n            className=\"submit action-button\"\n            style={{ background: \"blue\" }}\n            value=\"Submit\"\n          />\n        </Row>\n      </fieldset>\n    </Form>\n  );\n};\n\nconst Signup = () => {\n  const [redirect, setRedirect] = useState(null);\n  const [dataBool, setDataBool] = useState(null);\n  const [merchant, setMerchant] = useState(null);\n  const [formData, setFormData] = useState(null);\n\n  const handleClick = (buttonType, objectType, objectData) => {\n    if (objectType === \"merchant\") {\n      setMerchant({ ...merchant, ...objectData });\n    }\n    // TODO: modify models class to allow a business to have a list of possible locations in step three of the form filling ? or maybe do this after the account has already been created. probably do this because we dont want to make this form too complicated and combersome to complete\n    else if (objectType === \"formData\") {\n    }\n    if (buttonType === \"previous\") {\n      if (currentFieldsetIndex > 0) {\n        setCurrentFieldsetIndex(currentFieldsetIndex - 1);\n      }\n    } else if (buttonType === \"next\") {\n      if (currentFieldsetIndex < 2) {\n        setCurrentFieldsetIndex(currentFieldsetIndex + 1);\n      }\n    }\n  };\n  useEffect(() => {\n    //had to do this because memory leak due to component not unmounting properly\n    let mount = true;\n    if (dataBool && mount) {\n      setRedirect(\"/home\");\n    }\n\n    return () => (mount = false);\n  }, [dataBool]);\n  const onSubmit = (newBusiness) => {\n    const data = {};\n    // the merchant in state was being converted back to a regular object\n    data[\"merchant\"] = merchant;\n    data[\"business\"] = newBusiness;\n    const json = JSON.stringify(data);\n    localStorage.setItem(\"merchant\", merchant);\n    localStorage.setItem(\"business\", newBusiness);\n    makeApiRequest(\"http://127.0.0.1:5000/signup\", \"POST\", json, function () {\n      setDataBool(true);\n    });\n  };\n  const fieldSets = [\n    <CreateYourAccountFieldset\n      onClick={(buttonType, merchant) => handleClick(buttonType, merchant)}\n    ></CreateYourAccountFieldset>,\n    <PromoteYourMenuFieldset\n      onClick={(buttonType, merchant) => handleClick(buttonType, merchant)}\n    ></PromoteYourMenuFieldset>,\n    <BusinessFieldset\n      onSubmit={(newBusiness) => onSubmit(newBusiness)}\n      onClick={(buttonType) => handleClick(buttonType)}\n    ></BusinessFieldset>,\n  ];\n  const [currentFieldsetIndex, setCurrentFieldsetIndex] = useState(0);\n  if (redirect) {\n    return <Redirect to={redirect} />;\n  } else {\n    return (\n      <>\n        <Navbar src={logo} />\n        {/* <!-- multistep form -->*/}\n        <div className=\"signupBody\">\n          <div id=\"msform\">\n            {/* <!-- progressbar --> */}\n            <ProgressBar i={currentFieldsetIndex}></ProgressBar>\n            {/* <!-- fieldsets --> */}\n            {fieldSets[currentFieldsetIndex]}\n          </div>\n        </div>\n      </>\n    );\n  }\n};\nexport default Signup;\n","/Users/machina/Developer/quickbev/quickbev-website/src/pages/Home.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/Models.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Dashboard.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Chart.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Orders.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Deposits.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/Title.js",[],["75","76"],"/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/ListItems.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/pages/dashboard/listItems.js",[],"/Users/machina/Developer/quickbev/quickbev-website/src/SearchLocationInput.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":271,"column":10,"nodeType":"83","messageId":"84","endLine":271,"endColumn":16},{"ruleId":"81","severity":1,"message":"85","line":302,"column":9,"nodeType":"83","messageId":"84","endLine":302,"endColumn":21},{"ruleId":"81","severity":1,"message":"86","line":784,"column":10,"nodeType":"83","messageId":"84","endLine":784,"endColumn":18},{"ruleId":"81","severity":1,"message":"87","line":784,"column":20,"nodeType":"83","messageId":"84","endLine":784,"endColumn":31},{"ruleId":"77","replacedBy":"88"},{"ruleId":"79","replacedBy":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'tablet' is assigned a value but never used.","Identifier","unusedVar","'onFileUpload' is assigned a value but never used.","'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.",["90"],["91"],"no-global-assign","no-unsafe-negation"]